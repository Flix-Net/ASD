#include <iostream>
using namespace std;

struct Node
{
	int value;
	Node* next;
	int position;
};


Node* Add_Tail_List(struct Node* pHead, int& count);
void Print_List(struct Node* pHead,int &count);
Node* Add_List_Position(struct Node* pHead, int& count);
Node* Refresh_Position(struct Node* pHead);
Node* Add_List_Before(struct Node* pHead, int& count);
Node* Add_List_After(struct Node* pHead, int& count);
Node* Dell_List_Position(struct Node* pHead, int& count);
Node* Dell_List_Before(struct Node* pHead, int& count);
Node* Find_Prev(struct Node* pHead, struct Node* t);
Node* Dell_List_After(struct Node* pHead, int& count);


int main()
{
	setlocale(0, "");

	Node* pHead = NULL;

	int count = 0;
	int* pcount = &count;

	int cin_menu = 0;
	
	menu: cout << "1 - Создание списка;\n"
			<< "2 - Вывод списка;\n"
			<< "-------------------------------------\n"
			<< "3 - Добавление в конец списка;\n"
			<< "4 - Добавление по позиции;\n"
			<< "5 - Добавление перед элементом;\n"
			<< "6 - Добавление после элемента;\n"
		<< "-------------------------------------\n"
			<< "7 - Удаление по позиции;\n"
			<< "8 - Удаление перед элементом;\n"
			<< "9 - Удаление после элемента;\n"
			<< "Выбор: ";
			cin >> cin_menu;


	switch (cin_menu)
	{

		case 1:

		{
			pHead = new (Node);
			pHead->value = NULL;
			pHead->next = NULL;
			pHead->position = NULL;
			cout << "\n\t\tСписок создан!\n\n";
			system("pause");
			system("cls");
			goto menu;
		}
		
		case 2:
		{
			system("cls");
			Print_List(pHead,*pcount);
			system("pause");
			system("cls");
			goto menu;
		}

		case 3:
		{
			system("cls");
			Add_Tail_List(pHead,*pcount);
			system("pause");
			system("cls");
			goto menu;
		}

		case 4:
		{
			system("cls");
			Add_List_Position(pHead, *pcount);
			system("pause");
			system("cls");
			goto menu;
		}

		case 5:
		{
			system("cls");
			Add_List_Before(pHead, *pcount);
			system("pause");
			system("cls");
			goto menu;
		}

		case 6:
		{
			system("cls");
			Add_List_After(pHead, *pcount);
			system("pause");
			system("cls");
			goto menu;
		}

		case 7:
		{
			system("cls");
			Dell_List_Position(pHead, *pcount);
			system("pause");
			system("cls");
			goto menu;
		}

		case 8:
		{
			system("cls");
			Dell_List_Before(pHead, *pcount);
			system("pause");
			system("cls");
			goto menu;
		}

		case 9:
		{
			system("cls");
			Dell_List_After(pHead, *pcount);
			system("pause");
			system("cls");
			goto menu;
		}

		default:
		{
			cout << "Происходит выход...\n";
			system("pause");
		}
	
	}

	return 0;
}



void Print_List(struct Node* pHead, int &count)
{

	if (pHead == NULL)
	{
		cout << "\n\t\tСписок не создан!\n\n";
	}
	else
	{
		if (pHead->next == NULL)
		{
			cout << "\n\t\tСписок пустой!\n" << endl;
		}
		else
		{
			Node* t;
			t = pHead->next;

			for (; t != NULL; t = t->next)
			{
				cout << "Значение = " << t->value << "\tПозиция " << t->position << "\tАдрес = " << t << endl;
			}
			cout << "\n\tКоличество элементов в списке = " << count << endl << endl;
		}
	}
}

Node* Refresh_Position(struct Node* pHead)
{
	Node* t;
	int i = 0;
	for (t = pHead->next, i = 0; t != NULL; t = t->next, i++)
	{
		t->position = i;
	}
	return 0;
}

Node* Add_Tail_List(struct Node* pHead, int &count)
{
	if (pHead == NULL)
	{
		cout << "\n\t\tСоздайте список!\n" << endl;
	}
	else
	{
		Node* t;
		if (pHead->next == NULL)
		{
			t = new (Node);
			cout << "Введите значение: "; cin >> t->value;
			t->position = count;
			t->next = NULL;
			pHead->next = t;
			count++;
		}
		else
		{
			for (t = pHead->next; t != NULL; t = t->next)
			{
				if (t->next == NULL)
				{
					count++;
					t->next = new (Node);
					t = t->next;
					cout << "Введите значение: "; cin >> t->value;
					t->position = count - 1;
					t->next = NULL;
					cout << "\n\t\tЭлемент Добавлен!\n\n";
					
				}
			}
		}
	}
	return 0;
}

Node* Add_List_Position(struct Node* pHead, int& count)
{
	if (pHead == NULL)
	{
		cout << "\n\t\tСоздайте список!\n" << endl;
	}
	else
	{
		int cin_position = 0;
		bool position_true = false;
		cout << "Введите позицию: "; cin >> cin_position;

		Node* t;

		if (cin_position == 0)
		{
			t = new (Node);
			cout << "Введите значение: "; cin >> t->value;
			t->next = pHead->next;
			pHead->next = t;
			count++;
			Refresh_Position(pHead);
		}
		else
		{
			cin_position--;
			for (t = pHead->next; t != NULL; t = t->next)
			{
				if (t->position == cin_position)
				{
					position_true = true;
					break;
				}
			}
			if (!position_true)
			{
				cout << "\n\t\tНевозможно добавить в указанную позицию!\n\n";
			}
			else
			{
				Node* q;
				q = t->next;
				t->next = new (Node);
				t = t->next;
				cout << "Введите значение: "; cin >> t->value;
				t->next = q;
				count++;
				cout << "Добаление успешное!" << endl;
				Refresh_Position(pHead);
			}
		}
	}
	return 0;
}

Node* Add_List_Before(struct Node* pHead, int& count)
{
	if (pHead == NULL)
	{
		cout << "\n\t\tСоздайте список!\n" << endl;
	}
	else
	{
		int cin_value = 0;
		Node* t;
		bool value_find = false;

		cout << "Укажите значение перед которым нужно добавить элемент: ";
		cin >> cin_value;

		for (t = pHead->next; t!=NULL; t = t->next)
		{
			if (t->value == cin_value)
			{
				value_find = true;
				Node* q = t;

				if (t->position == 0)
				{
					t = new(Node);
					cout << "Введите значение: "; cin >> t->value;
					t->next = q;
					pHead->next = t;
					count++;
					Refresh_Position(pHead);
					return 0;
				}
				else
				{
					for (t = pHead->next; t != NULL; t = t->next)
					{
						if (t->next == q)
						{
							t->next = new(Node);
							t = t->next;
							cout << "Введите значение: "; cin >> t->value;
							t->next = q;
							count++;
							Refresh_Position(pHead);
							return 0;
						}
					}
				}
			}
		}
		if (value_find == false)
		{
			cout << "\n\t\tЗначение не найдено!\n\n";
		}
	}
	return 0;
}

Node* Add_List_After(struct Node* pHead, int& count)
{
	if (pHead == NULL)
	{
		cout << "\n\t\tСоздайте список!\n" << endl;
	}
	else
	{
		int cin_value = 0;
		Node* t;
		bool value_find = false;

		cout << "Укажите значение после которого нужно добавить элемент: ";
		cin >> cin_value;

		for (t = pHead->next; t != NULL; t = t->next)
		{
			if (t->value == cin_value)
			{
				value_find = true;
				Node* q = t->next;

				t->next = new(Node);
				t = t->next;
				cout << "Введите значение: "; cin >> t->value;
				t->next = q;
				count++;
				Refresh_Position(pHead);
				return 0;
			}
		}
		if (value_find == false)
		{
			cout << "\n\t\tЗначение не найдено!\n\n";
		}
	}
	return 0;
}

Node* Dell_List_Position(struct Node* pHead, int& count)
{
	if (pHead == NULL)
	{
		cout << "\n\t\tСоздайте список!\n" << endl;
	}
	else
	{
		if (pHead->next == NULL)
		{
			cout << "\n\t\tСписок пуст!\n" << endl;
		}
		else
		{
			int cin_position = 0;
			bool position_true = false;
			cout << "Введите позицию: "; cin >> cin_position;

			Node* t;

			if (cin_position == 0)
			{
				t = pHead->next;
				pHead->next = t->next;
				delete t;
				count--;
				Refresh_Position(pHead);
				return 0;
			}
			else
			{
				for (t = pHead->next; t != NULL; t = t->next)
				{
					if (t->position == cin_position)
					{
						position_true = true;
						break;
					}
				}
				if (!position_true)
				{
					cout << "\n\t\tПозиция не найдена!\n\n";
				}
				else
				{
					Node* q;
					q = t;
					for (t = pHead->next; t!= NULL; t = t->next)
					{
						if (t->next == q)
						{
							t->next = q->next;
							delete q;
							q = nullptr;
							count--;
							Refresh_Position(pHead);
							cout << "\n\t\tУдаление успешно завершено!\n\n";
							break;
						}
					}
				}
			}
		}
	}
}

Node* Dell_List_Before(struct Node* pHead, int& count)
{
	if (pHead == NULL)
	{
		cout << "\n\t\tСоздайте список!\n" << endl;
	}
	else
	{
		if (pHead->next == NULL)
		{
			cout << "\n\t\tСписок пуст!\n" << endl;
		}
		else
		{
			int cin_value = 0;
			Node* t;
			bool value_find = false;

			cout << "Укажите значение перед которым нужно удалить элемент: ";
			cin >> cin_value;

			for (t = pHead->next; t !=NULL; t = t->next )
			{
				if (t->value == cin_value)
				{
					if (t->position == 0)
					{
						cout << "\n\t\tПеред указанным значением нет элемента!\n\n";
						return 0;
					}
					else
					{
						Node* q = Find_Prev(pHead, t); // q запоминает адрес удаляемого элемента
						cout << "\n\t\tУдаляемое значение = " << q->value
							<< "\tЕго адрес = " << q << endl;

						if (q->position == 0)
						{
							pHead->next = q->next;
							delete q;
							q = nullptr;
							cout << "\n\t\tУдаление завернено!\n\n";
							Refresh_Position(pHead);
							count--;
							return 0;
						}
						else
						{
							t = q;
							t = Find_Prev(pHead, t);
							t->next = q->next;
							delete q;
							q = nullptr;
							Refresh_Position(pHead);
							count--;
							return 0;
						}
					}
				}
			}
			if (value_find == false)
			{
				cout << "\n\t\tУказанное значение не найдено!\n\n";
			}
		}
	}
	return 0;
}

Node* Dell_List_After(struct Node* pHead, int& count)
{
	if (pHead == NULL)
	{
		cout << "\n\t\tСоздайте список!\n" << endl;
	}
	else
	{
		if (pHead->next == NULL)
		{
			cout << "\n\t\tСписок пуст!\n" << endl;
		}
		else
		{
			int cin_value = 0;
			Node* t;
			bool value_find = false;

			cout << "Укажите значение после которого нужно удалить элемент: ";
			cin >> cin_value;

			for (t = pHead->next; t!= NULL; t = t->next)
			{
				if (t->value == cin_value)
				{
					value_find = true;
					if (t->next == NULL)
					{
						cout << "\n\t\tПосле этого значения нечего удалять!\n\n";
						return 0;
					}
					else
					{
						Node* q = t;
						t = t->next;
						cout << "\n\t\tУдаляемое значение = " << t->value
							<< "\tЕго адрес = " << t << endl;
						q->next = t->next;
						delete t;
						t = nullptr;
						count--;
						cout << "\n\t\tУдаление завершено!\n\n";
						Refresh_Position(pHead);
						return 0;
					}
				}
			}
			if (value_find == false)
			{
				cout << "\n\t\tУказанное значение не найдено!\n\n";
			}
		}
	}
	return 0;
}




Node* Find_Prev(struct Node* pHead, struct Node *t)
{
	Node* q = t;
	for (t = pHead->next; t != NULL; t = t->next)
	{
		if (t->next == q)
		{
			return t;
		}
	}
}







Node* Del_List(struct Node* pHead, int& count)
{
	if (pHead == NULL)
	{
		cout << "\n\t\tОчередь не создана!\n\n";
	}
	else
	{
		if (pHead->next == NULL)
		{
			cout << "\n\t\tОчередь пустая!\n" << endl;
		}
		else
		{
			
		}
	}
	return 0;
}
